Description: >
  Create highly available Squid cluster
Parameters:
  SquidConfig:
    Type: String
    Description: S3 URL to squid config zip archive deployed to /usr/local/squid/etc/
    AllowedPattern: ^s3://.+/.+\.zip$
  FirehoseAgentConfig:
    Type: String
    Description: S3 URL to Kinesis firehose agent config. Leave empty to disable log collection
    AllowedPattern: (^s3://.+/.+\.json$)|^$
  HealthCheckCidr:
    Type: String
<<<<<<< HEAD
    Description: CIDR for LB ENI to be whitelisted in HealthCheckSg enabling health checks
=======
    Description: CIDR for LB ENI to be whitelisted in ClusterSg enabling health checks
>>>>>>> feat: install firehose agent optionally
    AllowedPattern: ^(\d+\.){3}\d+/\d+$
  ClusterSize:
    Type: Number
    Default: 1
    Description: Number of instances to the cluster
  ClusterInstanceType:
    Type: String
    Default: t2.medium
    Description: Cluster instance type, only m*, r*, c*, and t* instances allowed
    AllowedPattern: ^(m|r|c|t)\d\.(nano|medium|large|\d*xlarge)$
  ClusterRootDiskSize:
    Type: Number
    Default: 12
    MinValue: 8
    MaxValue: 1024
    Description: Size of root disk in GB
  ClusterInstanceProfileArn:
    Type: String
    Description: ARN to Instance Profile for Squid cluster
  ClusterVpc:
    Type: AWS::EC2::VPC::Id
    Description: VPC for Squid and LB
  ClusterSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets for Squid cluster, public recommended
  LbSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets for LB, usually private

Mappings:
  AwsLinuxImageId:
    ap-south-1:
      Ec2Hvm64: ami-4fc58420
    eu-west-2:
      Ec2Hvm64: ami-1a7f6d7e
    eu-west-1:
      Ec2Hvm64: ami-acd005d5
    ap-northeast-2:
      Ec2Hvm64: ami-9bec36f5
    ap-northeast-1:
      Ec2Hvm64: ami-2a69be4c
    sa-east-1:
      Ec2Hvm64: ami-f1344b9d
    ca-central-1:
      Ec2Hvm64: ami-fd55ec99
    ap-southeast-1:
      Ec2Hvm64: ami-0797ea64
    ap-southeast-2:
      Ec2Hvm64: ami-8536d6e7
    eu-central-1:
      Ec2Hvm64: ami-c7ee5ca8
    us-east-1:
      Ec2Hvm64: ami-8c1be5f6
    us-east-2:
      Ec2Hvm64: ami-c5062ba0
    us-west-1:
      Ec2Hvm64: ami-02eada62
    us-west-2:
      Ec2Hvm64: ami-e689729e

Conditions:
  # EmptyLbSubnets: !Equals ["", !Join ["", !Ref LbSubnets] ]
  EmptyKfaConfig: !Equals ["", !Ref FirehoseAgentConfig]

Resources:
  ClusterAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: "300"
      DesiredCapacity: !Ref ClusterSize
      HealthCheckGracePeriod: "180"
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref ClusterLc
      MaxSize: "10"
      MetricsCollection:
        - Granularity: 1Minute
      MinSize: "0"
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true
      TargetGroupARNs:
         - !Ref LoadBalancerTargetGroup
      VPCZoneIdentifier: !Ref ClusterSubnets

  ClusterLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: !Ref ClusterRootDiskSize
            VolumeType: gp2
      IamInstanceProfile: !Ref ClusterInstanceProfileArn
      ImageId: !FindInMap
        - AwsLinuxImageId
        - !Ref AWS::Region
        - Ec2Hvm64
      InstanceType: !Ref ClusterInstanceType
      SecurityGroups:
        - !Ref ClusterSg
        - !Ref HealthCheckSg
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash"
              # squid
              - yum install -y squid34 || yum install -y squid
              - Fn::Join:
                - " && "
                - - mkdir -p /usr/local/squid/etc/ && cd /usr/local/squid/etc/
                  - !Join ["", [ "aws s3 cp \"", !Ref SquidConfig, "\" ./foreign-config.zip" ]]
                  - unzip ./foreign-config.zip
                  - rm -f ./foreign-config.zip
                  - rm -f /etc/squid/squid.conf
                  - ln -s /usr/local/squid/etc/squid.conf /etc/squid/
              - chkconfig squid on
              - service squid start
              # Kinesis firehose agent, optional
              - Fn::If:
                - EmptyKfaConfig
                - ""
                - Fn::Join:
                  - "\n"
                  - - yum install -y aws-kinesis-agent
                    - !Join ["", [ "aws s3 cp \"", !Ref FirehoseAgentConfig, "\" /etc/aws-kinesis/agent.json" ]]
                    - chkconfig aws-kinesis-agent on
                    - service aws-kinesis-agent restart

  ClusterSg:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Squid cluster access control
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      VpcId: !Ref ClusterVpc

  HealthCheckSg:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Squid cluster for NLB health check
      SecurityGroupIngress:
        - CidrIp: !Ref HealthCheckCidr
          FromPort: 3128
          ToPort: 3128
          IpProtocol: TCP
      Tags:
        - Key: Name
          Value: !Join [ -, [ !Ref "AWS::StackName", HealthCheck ]]
      VpcId: !Ref ClusterVpc

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets: !Ref LbSubnets
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      Type: network

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 3128
      Protocol: TCP

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Port: 3128
      Protocol: TCP
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      UnhealthyThresholdCount: 2
      VpcId: !Ref ClusterVpc
